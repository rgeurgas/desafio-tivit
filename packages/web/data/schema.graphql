type Client implements Node {
  User: User!
  _id: String!
  created_at: DateTime!
  email: String!
  id: ID!
  name: String!
  updated_at: DateTime!
}

scalar DateTime

input DeleteClientInput {
  clientMutationId: String
  id: ID!
}

type DeleteClientPayload {
  clientMutationId: String
  error: [String!]
}

input DeleteItemInput {
  clientMutationId: String
  id: ID!
}

type DeleteItemPayload {
  clientMutationId: String
  error: [String!]
}

input DeleteSalesProposalsInput {
  clientMutationId: String
  id: ID!
}

type DeleteSalesProposalsPayload {
  clientMutationId: String
  error: [String!]
}

scalar EmailAddress

type Item implements Node {
  User: User!
  _id: String!
  created_at: DateTime!
  description: String!
  id: ID!
  name: String!
  price: PositiveFloat!
  type: ItemTypes
  updated_at: DateTime!
}

enum ItemTypes {
  OTHERS
  PRODUCT
  SERVICE
}

input LoginInput {
  clientMutationId: String
  email: EmailAddress!
  password: String!
}

type LoginPayload {
  clientMutationId: String
  error: [String!]
  token: String
}

type Mutation {
  deleteClient(input: DeleteClientInput!): DeleteClientPayload!
  deleteItem(input: DeleteItemInput!): DeleteItemPayload!
  deleteSalesProposals(input: DeleteSalesProposalsInput!): DeleteSalesProposalsPayload!
  login(input: LoginInput!): LoginPayload!
  signup(input: SignupInput!): SignupPayload!
  upsertClient(input: UpsertClientInput!): UpsertClientPayload!
  upsertItem(input: UpsertItemInput!): UpsertItemPayload!
  upsertSalesProposals(input: UpsertSalesProposalsInput!): UpsertSalesProposalsPayload!
}

interface Node {
  id: ID!
}

scalar PositiveFloat

type Query {
  Clients: [Client!]
  Items: [Item!]
  SalesProposals: [SalesProposal!]
  me: User
  node(id: ID!): Node
}

type SalesProposal implements Node {
  Client: Client!
  Items: [Item!]!
  _id: String!
  created_at: DateTime!
  id: ID!
  updated_at: DateTime!
}

input SignupInput {
  clientMutationId: String
  email: EmailAddress!
  name: String!
  password: String!
}

type SignupPayload {
  User: User
  clientMutationId: String
  error: [String!]
}

input UpsertClientInput {
  clientMutationId: String
  email: String
  id: ID
  name: String
  password: String
}

type UpsertClientPayload {
  Client: Client
  clientMutationId: String
  error: [String!]
}

input UpsertItemInput {
  clientMutationId: String
  description: String
  id: ID
  name: String
  price: PositiveFloat
  type: ItemTypes
}

type UpsertItemPayload {
  Item: Item
  clientMutationId: String
  error: [String!]
}

input UpsertSalesProposalsInput {
  client: ID
  clientMutationId: String
  id: ID
  items: [ID!]
  name: String
}

type UpsertSalesProposalsPayload {
  SalesProposal: SalesProposal
  clientMutationId: String
  error: [String!]
}

type User implements Node {
  _id: String!
  created_at: DateTime!
  email: EmailAddress!
  id: ID!
  name: String!
  updated_at: DateTime!
}